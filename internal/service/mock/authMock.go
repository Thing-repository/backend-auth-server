// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	core "github.com/Thing-repository/backend-server/pkg/core"
	gomock "github.com/golang/mock/gomock"
)

// Mocktoken is a mock of token interface.
type Mocktoken struct {
	ctrl     *gomock.Controller
	recorder *MocktokenMockRecorder
}

// MocktokenMockRecorder is the mock recorder for Mocktoken.
type MocktokenMockRecorder struct {
	mock *Mocktoken
}

// NewMocktoken creates a new mock instance.
func NewMocktoken(ctrl *gomock.Controller) *Mocktoken {
	mock := &Mocktoken{ctrl: ctrl}
	mock.recorder = &MocktokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktoken) EXPECT() *MocktokenMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *Mocktoken) GenerateToken(userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenMockRecorder) GenerateToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*Mocktoken)(nil).GenerateToken), userId)
}

// ValidateToken mocks base method.
func (m *Mocktoken) ValidateToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MocktokenMockRecorder) ValidateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*Mocktoken)(nil).ValidateToken), token)
}

// Mockhash is a mock of hash interface.
type Mockhash struct {
	ctrl     *gomock.Controller
	recorder *MockhashMockRecorder
}

// MockhashMockRecorder is the mock recorder for Mockhash.
type MockhashMockRecorder struct {
	mock *Mockhash
}

// NewMockhash creates a new mock instance.
func NewMockhash(ctrl *gomock.Controller) *Mockhash {
	mock := &Mockhash{ctrl: ctrl}
	mock.recorder = &MockhashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhash) EXPECT() *MockhashMockRecorder {
	return m.recorder
}

// GenerateHash mocks base method.
func (m *Mockhash) GenerateHash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHash indicates an expected call of GenerateHash.
func (mr *MockhashMockRecorder) GenerateHash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*Mockhash)(nil).GenerateHash), password)
}

// ValidateHash mocks base method.
func (m *Mockhash) ValidateHash(hash, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateHash", hash, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateHash indicates an expected call of ValidateHash.
func (mr *MockhashMockRecorder) ValidateHash(hash, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateHash", reflect.TypeOf((*Mockhash)(nil).ValidateHash), hash, password)
}

// Mockdb is a mock of db interface.
type Mockdb struct {
	ctrl     *gomock.Controller
	recorder *MockdbMockRecorder
}

// MockdbMockRecorder is the mock recorder for Mockdb.
type MockdbMockRecorder struct {
	mock *Mockdb
}

// NewMockdb creates a new mock instance.
func NewMockdb(ctrl *gomock.Controller) *Mockdb {
	mock := &Mockdb{ctrl: ctrl}
	mock.recorder = &MockdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdb) EXPECT() *MockdbMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *Mockdb) AddUser(user *core.AddUserDB) (*core.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(*core.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockdbMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*Mockdb)(nil).AddUser), user)
}

// GetUser mocks base method.
func (m *Mockdb) GetUser(userId int) (*core.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*core.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockdbMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Mockdb)(nil).GetUser), userId)
}

// GetUserByEmail mocks base method.
func (m *Mockdb) GetUserByEmail(email string) (*core.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*core.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockdbMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*Mockdb)(nil).GetUserByEmail), email)
}
